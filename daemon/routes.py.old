from flask import render_template, url_for, flash, redirect, request
from flaskblog import app, db, bcrypt, PROPERTIES_PATH
from flaskblog.forms import RegistrationForm, LoginForm
from flaskblog.models import User, Post
from flask_login import login_user, current_user, logout_user, login_required
import os

REMOTE_PROPERTIES = "/home/pi/git/ssgb/web/remote_properties"


posts = [
	{
	'author': 'Jonas Rose',
	'title': 'Blog Post 1',
	'content': 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas ullamcorper turpis leo, quis finibus risus rhoncus eget. Mauris lorem massa, convallis vitae suscipit in, feugiat maximus erat. ',
	'date_posted': 'April 20, 2018'
	},
	{
	'author': 'Simone Steiger',
	'title': 'Blog Post 2',
	'content': 'Donec eleifend a ligula ac pretium. Sed ac lectus et massa viverra tincidunt. In feugiat condimentum scelerisque. ',
	'date_posted': 'April 21, 2018'
	}]




def save_props_and_relays(relays_to_save, properties_to_save, path=REMOTE_PROPERTIES):
	with open(path, "w") as f:
		for key in relays_to_save:
			f.write(f"relay {key} {relays_to_save[key][0]} {relays_to_save[key][1]} {relays_to_save[key][2]} {relays_to_save[key][3]}\n")
		for key in properties_to_save:
			f.write(f"{key} {properties_to_save[key]}\n")

#key can be just a key for properties or the id for relays
def update_prop_or_relay(key, newvalue, path=REMOTE_PROPERTIES):
	print(f"updating {key} in {path}")
	properties = {}
	relays = {}
	with open(path, "r") as f:
		for line in f.readlines():
			values = line.split()
			if values[0] == "relay":
				if values[1] == key: #check if i can already overwrite the old stuff
					relays[key] = newvalue #as we expect to change a relay, "newvalue" should be a list.
				else:
					relays[values[1]] = [values[2], values[3], values[4], values[5]] # if it didn't match, write the normal values instead 
			elif values[0] == key:
				properties[key] = newvalue #and if it wasn't a relay, just save it as a property. Here it doesn't need to be a list.
			else:
				properties[values[0]] = values[1]
	save_props_and_relays(relays, properties, path)	#save them all

# def get_prop_value(prop, path=REMOTE_PROPERTIES):
# 	properties = {}
# 	lines = open(path, "r").readlines()
# 	for line in lines:
# 		properties[line.split()[0]] = line.split()[1]
# 	return properties[prop]




@app.route("/")
@app.route("/home")
def home():
    return render_template("home.html", posts=posts)


@app.route("/about", methods=['GET'])
def about():
	return render_template("about.html", title='About')


@app.route("/register", methods=['GET', 'POST'])
def register():
	if current_user.is_authenticated:
		return redirect(url_for("home"))
	form = RegistrationForm()
	if form.validate_on_submit():
		hashed_password = bcrypt.generate_password_hash(form.password.data).decode("utf-8")
		user = User(username=form.username.data, email=form.email.data, password=hashed_password)
		db.session.add(user)
		db.session.commit()
		flash("Your account has been created! Your are now able to log in.", 'success')
		return redirect(url_for('home'))
	return render_template('register.html', title='Register', form=form)


@app.route("/login", methods=['GET', 'POST'])
def login():
	if current_user.is_authenticated:
		return redirect(url_for("home"))
	form = LoginForm()
	if form.validate_on_submit():
		user = User.query.filter_by(email=form.email.data).first()
		if user and bcrypt.check_password_hash(user.password, form.password.data):
			login_user(user, remember=form.remember.data)
			next_page = request.args.get('next')
			return redirect(next_page) if next_page else redirect(url_for('home'))
		else:
			flash('Login Unsuccessful! Please check email and password', 'danger')
	return render_template('login.html', title='Login', form=form)

@app.route("/logout")
def logout():
	logout_user()
	return redirect(url_for('home'))

@app.route("/dashboard")
@login_required
def dashboard():
	image_file = url_for('static', filename ='profile_pics/' + current_user.image_file )
	return render_template('controls.html', title='Controls', image_file = image_file)
	
# @login_required
@app.route("/controls", methods=["POST", "GET"])
def controls():
	# placeholders = {
	# 	"fan_value" : get_prop_value("pwm_dutycycle")
	# }

	if request.method == 'POST':
		print(request.form)

		if request.form.get("relay_ID"):
			print("Detected Relay Input")
			ID = request.form.get('relay_ID')
			TIMER = request.form.get('relay_TIMER')
			ONTIME = request.form.get('relay_ONTIME')
			OFFTIME = request.form.get('relay_OFFTIME')
			STATE = request.form.get('relay_STATE')
			values = f"{ID} {TIMER} {ONTIME} {OFFTIME} {STATE}\n"
			print(values)
                        if ONTIME is None:
                                ONTIME = "persist"
                        elif OFFTIME is None:
                                OFFTIME = "persist"
			update_prop_or_relay(ID, [TIMER, ONTIME, OFFTIME, STATE])

		elif request.form.get("fan_number"):
			print("Detected PWM Input")
			fan_number = request.form.get("fan_number")
			fan_value = request.form.get("fan_value")
			fan_mode = request.form.get("fan_mode")
			if fan_number == "9":
				# print("fan 9")
				if fan_mode == 'manual':
					update_prop_or_relay("vent_mode", "manual")
					update_prop_or_relay("pwm_vent", fan_value)
					response = f"Updating properties to manual control with {fan_value}% dutycyle."
					print(response)
				else:
					update_prop_or_relay("vent_mode", "auto")
					response = f"Updating properties to automatic control."
					print(response)

				return render_template('controls.html', title='Controls',  response=[response])

			#elif fan_number == "10":       ## deactived on 3.1.21, due to the turb-fan not working, see "PWM Probleme" on tomboy for further info.
			#	update_prop_or_relay("pwm_turb", fan_value)
			#	response = f"Updated Turbulence Fan in remote_properties to {fan_value}%"
			#	print(response)
			#	return render_template('controls.html', title='Controls',  response=[response])

			elif fan_number == "3":
				update_prop_or_relay("pwm_fog", fan_value)
				response = f"Updated Fog Fan in remote_properties to {fan_value}%"
				print(response)
				return render_template('controls.html', title='Controls',  response=[response])
		elif request.form.get("opt_temp") or request.form.get("std_pwm") or request.form.get("max_delta_t"):
			response1, response2, response3 = "", "", ""
			if request.form.get("opt_temp"):
				print("opt temp update")
				update_prop_or_relay("opt_temp", request.form.get("opt_temp"))
				response1 = f"Updated optimal temp to {request.form.get('opt_temp')}°\r"

			if request.form.get("std_pwm"):
				print("std pwm update")
				update_prop_or_relay("std_pwm", request.form.get("std_pwm"))
				response2 = f"Updated std pwm to {request.form.get('std_pwm')}%\r"

			if request.form.get("max_delta_t"):
				print("max delta Tb update")
				update_prop_or_relay("max_delta_t", request.form.get("max_delta_t"))
				response3 = f"Updated max delta T to {request.form.get('max_delta_t')}°\r"
			return render_template('controls.html', title='Controls',  response=[response1, response2, response3])

	return render_template('controls.html', title='Controls')



